<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% if title %}{{ title }} â€” {% endif %}{{ config.site.title or "Sibylline Software" }}</title>
    <meta name="description" content="{{ description or config.site.description or 'Your trusted partner for innovative digital solutions' }}">
    <meta name="generator" content="{{ eleventy.generator }}">
    
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="icon" type="image/png" sizes="32x32" href="/img/favicon.png">
    <link rel="apple-touch-icon" href="/img/favicon.png">
    <!-- Critical CSS to prevent flash of unstyled content -->
    <style>
        /* Immediate critical styles to prevent FOUC */
        :root {
            --color-background: #1a1a1a;
            --color-text: #f5f5f5;
        }
        html, body {
            background: var(--color-background);
            color: var(--color-text);
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        }
        
        /* Ensure code samples don't widen the page */
        pre { 
            overflow-x: auto; 
            max-width: 100%; 
        }
        
        /* Prevent horizontal scrollbars globally */
        body {
            overflow-x: hidden;
        }
        /* Hide content until main styles load */
        .main { opacity: 0; }
        .loaded .main { opacity: 1; transition: opacity 0.2s ease; }
    </style>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.28.2/dist/tocbot.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.css">
    
    <link rel="stylesheet" href="/styles/core/design-system.css">
    <link rel="stylesheet" href="/styles/core/prism.css">
    
    
    {%- if stylesheets %}
    {%- for stylesheet in stylesheets %}
    <link rel="stylesheet" href="{{ stylesheet }}">
    {%- endfor %}
    {%- endif %}
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-H63XXGRLBY"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-H63XXGRLBY');
    </script>
    
    
</head>
<body>
    <header class="header">
        <div class="header-content">
            <h1><a href="/" style="display: flex; align-items: center;"><img src="/img/logo.svg" alt="Sibylline Soft Logo" style="height: 24px; width: auto; margin-right: 8px;">{{ config.site.title or "Sibylline Software" }}</a></h1>
            <nav class="nav">
                <ul>
                    <li><a href="/domains/">Domains</a></li>
                    <li><a href="/products/">Products</a></li>
                    <li><a href="/research/">Research</a></li>
                    <li><a href="/articles/">Articles</a></li>
                    <li><a href="/about/">About</a></li>
                </ul>
            </nav>
        </div>
    </header>
    
    <!-- Floating Table of Contents -->
    <div class="toc-container">
        <div class="toc-title">On This Page</div>
        <div class="toc"></div>
    </div>
    
    <main class="main">
        {{ content | safe }}
    </main>
    
    {% if enableModals %}
    <!-- Modal positioned as direct child of body for proper stacking -->
    <div id="service-modal" class="modal-overlay">
       <div class="modal-content">
          <button class="modal-close" aria-label="Close modal">&times;</button>
          <div class="modal-image-sidebar">
             <img id="modal-image" src="" alt="">
             <div class="modal-image-overlay"></div>
          </div>
          <div class="modal-content-area">
             <div class="modal-header">
                <h3 id="modal-title"></h3>
                <p id="modal-summary"></p>
             </div>
             <div class="modal-body" id="modal-details"></div>
             <div class="modal-cta">
                <a href="#" class="modal-cta-button" id="modal-cta">
                <span class="btn-inner">
                <span id="modal-cta-text">Get Started</span>
                <i data-lucide="external-link"></i>
                </span>
                </a>
             </div>
          </div>
       </div>
    </div>
    {% endif %}
    
    <footer class="footer">
        <p>&copy; {{ config.now.getFullYear() }} {{ config.site.title or "Sibylline Software" }}. Built with <a href="https://www.11ty.dev/">Eleventy</a>.</p>
    </footer>

    <!-- Tocbot JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/tocbot@4.28.2/dist/tocbot.min.js"></script>
    <!-- Custom TOC ScrollSpy disabled - using tocbot instead -->
    <!-- <script src="/js/toc-scrollspy.js"></script> -->
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <!-- Mermaid.js for diagrams -->
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10.7.0/dist/mermaid.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const headings = document.querySelectorAll('.main h2:not(.article-title), .main .project-content h2, .main .project-content h3');
            const tocContainer = document.querySelector('.toc-container');

            if (headings.length > 0 && tocContainer) {
                headings.forEach((heading, index) => {
                    if (!heading.id) {
                        const text = heading.textContent.trim();
                        const id = text.toLowerCase()
                            .replace(/[^\w\s-]/g, '')
                            .replace(/\s+/g, '-')
                            .replace(/--+/g, '-')
                            .replace(/^-|-$/g, '');
                        heading.id = id || `section-${index + 1}`;
                    }
                });

                tocbot.init({
                    tocSelector: '.toc',
                    contentSelector: '.main',
                    headingSelector: 'h2:not(.article-title), .project-content h2, .project-content h3',
                    hasInnerContainers: true,
                    scrollSmooth: true,
                    scrollSmoothDuration: 400,
                    scrollSmoothOffset: -100,
                    headingsOffset: window.innerHeight * 0.4,
                    throttleTimeout: 16,
                    collapseDepth: 1,
                    orderedList: false,
                    activeLinkClass: 'is-active-link',
                    collapsibleClass: 'is-collapsible',
                    isCollapsedClass: 'is-collapsed',
                    listClass: 'toc-list',
                    listItemClass: 'toc-list-item',
                    activeListItemClass: 'is-active-li',
                    includeHtml: false
                });

                tocContainer.style.display = 'block';

                // Force initial collapsed state for all sections and add click handlers
                setTimeout(() => {
                    // Find only the TOP-LEVEL items (direct children of the main .toc)
                    // These are the main section headings that should always be visible
                    const topLevelItems = document.querySelectorAll('.toc > .toc-list > .toc-list-item');
                    
                    topLevelItems.forEach((item, index) => {
                        const nestedList = item.querySelector('.toc-list');
                        const mainLink = item.querySelector(':scope > a');
                        const linkText = mainLink?.textContent || 'Unknown';
                        
                        
                        if (nestedList) {
                            // This is a main section with sub-items
                            item.classList.add('is-collapsible');
                            item.classList.add('is-collapsed'); // Start with sub-items collapsed
                            
                            
                            // Add click handler for manual expand/collapse  
                            if (mainLink) {
                                mainLink.addEventListener('click', (e) => {
                                    item.classList.toggle('is-collapsed');
                                });
                            }
                        } else {
                        }
                    });
                    
                    // Store reference for the scroll function
                    const collapsibleTocItems = Array.from(topLevelItems).filter(item => 
                        item.querySelector('.toc-list') !== null
                    );

                    
                    // Expand the currently visible section
                    const expandVisibleSection = () => {
                        
                        const headings = document.querySelectorAll('.main h2:not(.article-title)');
                        
                        let currentSection = null;
                        const scrollY = window.scrollY;
                        const viewportHeight = window.innerHeight;
                        const scrollOffset = viewportHeight * 0.3;
                        const scrollPosition = scrollY + scrollOffset;
                        
                        
                        
                        // Find which H2 section we're currently viewing
                        for (let i = headings.length - 1; i >= 0; i--) {
                            const heading = headings[i];
                            const isActive = heading.offsetTop <= scrollPosition;
                            
                            if (isActive) {
                                currentSection = heading;
                                break;
                            }
                        }
                        
                        // Collapse all sections first
                        collapsibleTocItems.forEach((item, index) => {
                            item.classList.add('is-collapsed');
                        });
                        
                        // If we found a current section, expand its TOC entry
                        if (currentSection && currentSection.id) {
                            const tocLink = document.querySelector(`.toc a[href="#${currentSection.id}"]`);
                            
                            if (tocLink) {
                                const tocItem = tocLink.closest('.toc-list-item');
                                
                                if (tocItem) {
                                    const subList = tocItem.querySelector('.toc-list');
                                    
                                    if (subList) {
                                        tocItem.classList.remove('is-collapsed');
                                    }
                                }
                            }
                        }
                    };
                    
                    // Expand initially visible section
                    expandVisibleSection();
                    
                    // Update expanded section on scroll
                    let scrollTimer;
                    window.addEventListener('scroll', () => {
                        clearTimeout(scrollTimer);
                        scrollTimer = setTimeout(expandVisibleSection, 16);
                    }, { passive: true });
                    
                }, 100);

                // Initialize improved scroll spy after TOC is ready
                setTimeout(() => {
                    if (typeof TOCScrollSpy !== 'undefined') {
                        window.tocScrollSpy = new TOCScrollSpy({
                            tocSelector: '.toc',
                            headingSelector: 'h2:not(.article-title), .project-content h2, .project-content h3',
                            headerOffset: 100,
                            throttleDelay: 16
                        });
                    }
                }, 200);

                let tocVisible = false;
                function handleTocVisibility() {
                    const heroSection = document.querySelector('canvas') || document.querySelector('.article-header') || document.querySelector('.main > *:first-child');
                    if (!heroSection) {
                        const shouldShow = window.scrollY > 200;
                        if(shouldShow && !tocVisible) {
                            tocContainer.classList.add('visible');
                            tocVisible = true;
                        } else if (!shouldShow && tocVisible) {
                            tocContainer.classList.remove('visible');
                            tocVisible = false;
                        }
                        return;
                    }
                    
                    const heroBottom = heroSection.offsetTop + heroSection.offsetHeight;
                    const shouldShow = window.scrollY > heroBottom - 200;
                    
                    if (shouldShow && !tocVisible) {
                        tocContainer.classList.add('visible');
                        tocVisible = true;
                    } else if (!shouldShow && tocVisible) {
                        tocContainer.classList.remove('visible');
                        tocVisible = false;
                    }
                }

                handleTocVisibility();
                window.addEventListener('scroll', handleTocVisibility, { passive: true });
            } else {
                if (tocContainer) {
                    tocContainer.style.display = 'none';
                }
            }
        });

        window.addEventListener('beforeunload', function() {
            if (typeof tocbot !== 'undefined') {
                tocbot.destroy();
            }
        });

        lucide.createIcons();
        mermaid.initialize({
            startOnLoad: true,
            theme: 'dark',
            themeVariables: {
                primaryColor: '#6366f1',
                primaryTextColor: '#f5f5f5',
                primaryBorderColor: '#4f46e5',
                lineColor: '#6366f1',
                secondaryColor: '#2a2a2a',
                tertiaryColor: '#404040',
                background: '#1a1a1a',
                mainBkg: '#2a2a2a',
                secondBkg: '#404040',
                tertiaryBkg: '#525252'
            },
            flowchart: {
                htmlLabels: true,
                curve: 'basis'
            }
        });
    </script>
    
    <!-- Secure Contact Email System -->
    <script src="/js/secure-contact.js"></script>
    
    {%- if scripts %}
    {%- for script in scripts %}
    <script src="{{ script }}"></script>
    {%- endfor %}
    {%- endif %}
    
    <!-- Mark page as loaded to show content -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            document.body.classList.add('loaded');
        });
    </script>
</body>
</html>